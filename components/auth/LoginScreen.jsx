import { StatusBar } from 'expo-status-bar';
import React, { useState, useContext, useEffect } from 'react';
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image, Modal, Dimensions, PixelRatio, Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { UserContext } from '../../contexts/UserContext';
import { redirectToOAuth, getUserInfo } from '../../api/auth';
import { useNavigation } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { KaushanScript_400Regular } from '@expo-google-fonts/kaushan-script';
import SplashScreen from '../common/SplashScreen';
import { Ionicons } from '@expo/vector-icons';
import * as Linking from 'expo-linking';
import Feather from 'react-native-vector-icons/Feather';

// ÏïÑÏù¥ÏΩò Ïù¥ÎØ∏ÏßÄ
const kakaoIcon = require('../../assets/icons/kakao_logo.png');
const googleIcon = require('../../assets/icons/google_loco.png');
// üì± iPhone 13 Í∏∞Ï§Ä (390 x 844)
const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');
const BASE_WIDTH = 390;
const BASE_HEIGHT = 844;

// Ìè∞Ìä∏/Ïª¥Ìè¨ÎÑåÌä∏ ÏÇ¨Ïù¥Ï¶à ÏûêÎèô Î≥ÄÌôò Ìï®Ïàò
function normalize(size, based = 'width') {
  const scale = based === 'height' ? SCREEN_HEIGHT / BASE_HEIGHT : SCREEN_WIDTH / BASE_WIDTH;
  const newSize = size * scale;
  if (Platform.OS === 'ios') {
    return Math.round(PixelRatio.roundToNearestPixel(newSize));
  } else {
    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 1;
  }
}

export default function LoginScreen() {
  const { setUser } = useContext(UserContext);
  const navigation = useNavigation();
  const [fontsLoaded] = useFonts({ KaushanScript_400Regular });
  const [showSplash, setShowSplash] = useState(false);

  if (!fontsLoaded) {
    return <SplashScreen />;
  }

  // üîÅ mock Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨Ïö© useEffect
useEffect(() => {
  const checkMockLogin = async () => {
    const isMock = await AsyncStorage.getItem('mock');
    const token = await AsyncStorage.getItem('jwt');
    if (isMock === 'true' && token) {
      console.log('üß™ [Mock Î°úÍ∑∏Ïù∏ Í∞êÏßÄÎê®] ‚Üí UserInfo Ïù¥Îèô');
      navigation.replace('UserInfo'); // ÎòêÎäî 'BottomTab'
    }
  };
  checkMockLogin();
}, []);

  // ‚úÖ Îî•ÎßÅÌÅ¨Î°ú Ïï±Ïù¥ ÎèåÏïÑÏôîÏùÑ Îïå ÌÜ†ÌÅ∞Í≥º Î™®ÎìúÎ•º Ï∂îÏ∂úÌïòÏó¨ Ï≤òÎ¶¨
  useEffect(() => {
    const handleDeepLink = async ({ url }) => {
      console.log('[Îî•ÎßÅÌÅ¨ ÏàòÏã†] URL:', url);
      try {
        const parsed = Linking.parse(url);
        console.log('[üîç parsed Ï†ÑÏ≤¥ Íµ¨Ï°∞ ÌôïÏù∏]', parsed);
        const token = parsed.queryParams?.token;
        const mode = parsed.queryParams?.mode;
        console.log('üîë ÌååÏã±Îêú token:', token);
        console.log('üß≠ ÌååÏã±Îêú mode:', mode);

        if (!token) {
          console.warn(' ÌÜ†ÌÅ∞Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå ‚Üí ÏïÑÎ¨¥ Ï≤òÎ¶¨ Ïïà Ìï®');
          return;
        }
        await AsyncStorage.setItem('jwt', token);
        console.log('üíæ ÌÜ†ÌÅ∞ Ï†ÄÏû• ÏôÑÎ£å');
        await AsyncStorage.removeItem('mock');
        console.log('üßπ mock ÏÉÅÌÉú Ï†úÍ±∞ ÏôÑÎ£å');
        const savedToken = await AsyncStorage.getItem('jwt');
        console.log('üîÅ Ï†ÄÏû•Îêú ÌÜ†ÌÅ∞ Ïû¨ÌôïÏù∏:', savedToken);

        if (!savedToken) {
          console.warn(' ÌÜ†ÌÅ∞ Ï†ÄÏû• Ïã§Ìå® ÎòêÎäî Î∞òÏòÅ Ïïà Îê® ‚Üí Ïù¥Îèô Ï§ëÎã®');
          Alert.alert('Ïò§Î•ò', 'ÌÜ†ÌÅ∞ Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
          return;
        }

        if (mode === 'register') {
          console.log('[Î™®Îìú: register] ‚Üí UserInfoÎ°ú Ïù¥Îèô');
          navigation.replace('UserInfo');
          return;
        }

        try {
          console.log('üì° Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏöîÏ≤≠ ÏãúÏûë');
          const user = await getUserInfo(token);
          setUser({ ...user, token }); // ‚úÖ token Ìè¨Ìï®
          await AsyncStorage.setItem('user', JSON.stringify({ ...user, token }));
          console.log('‚úÖ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû• ÏôÑÎ£å ‚Üí BottomTab Ïù¥Îèô');
          navigation.replace('BottomTab');
        } catch (error) {
          console.error('‚ùå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏöîÏ≤≠ Ïã§Ìå®');
          if (error.response?.status === 400) {
            console.log('üÜï [getUserInfo] 400 ÏòàÏô∏ ‚Üí ÌöåÏõêÍ∞ÄÏûÖ Ïù¥Îèô');
            navigation.replace('UserInfo');
          } else {
            console.error('üìõ ÏÉÅÏÑ∏ Ïò§Î•ò:', error);
            Alert.alert('Ïò§Î•ò', 'ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
          }
        }
      } catch (err) {
        console.error('‚ùå [Îî•ÎßÅÌÅ¨ ÌååÏã± Ï§ë ÏòàÏô∏ Î∞úÏÉù]', err);
      }
    };

    const sub = Linking.addEventListener('url', handleDeepLink);
    Linking.getInitialURL().then((url) => {
      if (url) {
        console.log('üí° Ï¥àÍ∏∞ URL Í∞êÏßÄÎê® ‚Üí ÏßÅÏ†ë Ï≤òÎ¶¨ ÏãúÏûë');
        handleDeepLink({ url });
      } else {
        console.log('‚ÑπÔ∏è Ïï± Ï≤òÏùå Ïã§Ìñâ Ïãú URL ÏóÜÏùå');
      }
    });

    return () => sub.remove();
  }, []);

  // ‚úÖ OAuth Î°úÍ∑∏Ïù∏ ÏãúÏûë: Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïã§ÌñâÎê®
  const handleOAuthLogin = async (provider) => {
    try {
      await redirectToOAuth(provider);
    } catch (error) {
      console.error('[OAuth Ïò§Î•ò]', error);
      Alert.alert('Î°úÍ∑∏Ïù∏ Ïã§Ìå®', 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  return (
    <View style={styles.container}>
      <StatusBar style="auto" />
      <Modal
        visible={showSplash}
        transparent
        animationType="fade"
        onRequestClose={() => setShowSplash(false)}
      >
        <SplashScreen />
      </Modal>

      <View style={styles.logoContainer}>
        <Text style={styles.appName}>moyeo </Text>
      </View>

      <View style={styles.buttonContainer}>
        {/* Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ */}
        <TouchableOpacity
          style={[styles.loginButton, styles.kakaoButton]}
          onPress={() => handleOAuthLogin('kakao')}
        >
          <Image source={kakaoIcon} style={styles.icon1} />
          <Text style={styles.loginButtonText}>Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏</Text>
        </TouchableOpacity>

        {/* Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ */}
        <TouchableOpacity
          style={[styles.loginButton, styles.googleButton]}
          onPress={() => handleOAuthLogin('google')}
        >
          <Image source={googleIcon} style={styles.icon2} />
          <Text style={styles.loginButtonText}>Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏</Text>
        </TouchableOpacity>

        {/* mock Î°úÍ∑∏Ïù∏ */}
        <TouchableOpacity
  style={[styles.loginButton, styles.mockButton]}
  onPress={async () => {
    await AsyncStorage.setItem('mock', 'true');
    await AsyncStorage.setItem('jwt', 'mock-token');
    navigation.replace('UserInfo'); // ÎòêÎäî 'BottomTab'
  }}
>
  <Text style={styles.mockButtonText}>ÏûÑÏãú Î°úÍ∑∏Ïù∏ (Mock)</Text>
</TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  logoContainer: {
    alignItems: 'center',
    marginTop: normalize(180, 'height'),
    marginBottom: normalize(100, 'height'),
  },
  appName: {
    fontSize: normalize(100),
    fontFamily: 'KaushanScript_400Regular',
    color: '#4F46E5',
    lineHeight: normalize(100, 'height'),
    marginBottom: normalize(40, 'height'),
  },
  buttonContainer: {
    width: '90%',
    alignItems: 'center',
  },
  loginButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FFFFFF',
    paddingVertical: normalize(13, 'height'),
    paddingHorizontal: normalize(30),
    borderRadius: normalize(14),
    borderWidth: 1,
    borderColor: '#DDDDDD',
    width: '100%',
    marginBottom: normalize(20, 'height'),
  },
  kakaoButton: {
    backgroundColor: '#FFEB3B',
    borderWidth: 0,
    marginBottom: normalize(10, 'height'),
  },
  googleButton: {
    backgroundColor: '#F3f3f3',
    borderWidth: 1,
    borderColor: '#f3f3f3',
    marginBottom: normalize(10, 'height'),
  },
  mockButton: {
    backgroundColor: '#4C5FD5',
    borderWidth: 0,
    marginBottom: normalize(2, 'height'),
  },
  loginButtonText: {
    fontSize: normalize(17),
    color: '#000000',
    marginLeft: normalize(-14),
  },
  mockButtonText: {
    fontSize: normalize(17),
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  icon1: {
  width: normalize(26),
  height: normalize(26),
  resizeMode: 'contain',
  marginRight: normalize(8),
  transform: [{ translateX: normalize(-110) }], // ‚Üê ÏôºÏ™ΩÏúºÎ°ú 20px Ïù¥Îèô
},
icon2: {
  width: normalize(26),
  height: normalize(26),
  resizeMode: 'contain',
  marginRight: normalize(8),
  transform: [{ translateX: normalize(-115) }], // ‚Üê ÏôºÏ™ΩÏúºÎ°ú 20px Ïù¥Îèô
},
  fabContainer: {
    position: 'absolute',
    right: normalize(18),
    bottom: normalize(32, 'height'),
    flexDirection: 'row',
    gap: normalize(12),
  },
  chatbotButton: {
    width: normalize(48),
    height: normalize(48),
    borderRadius: normalize(24),
    backgroundColor: '#6B7280',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: normalize(8),
  },
  splashButton: {
    width: normalize(48),
    height: normalize(48),
    borderRadius: normalize(24),
    backgroundColor: '#4F46E5',
    justifyContent: 'center',
    alignItems: 'center',
  },
});
